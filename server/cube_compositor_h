/*
 * Copyright Â© 2020 Ruinan Duan, duanruinan@zoho.com 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef CUBE_COMPOSITOR_H
#define CUBE_COMPOSITOR_H

#include <stdbool.h>
#include <cube_utils.h>
#include <cube_signal.h>
#include <cube_protocal.h>
#include <cube_client_agent.h>

struct cb_buffer {
	struct cb_buffer_info info;
	struct cb_signal destroy_signal;
	struct cb_signal flip_signal;
	struct cb_signal complete_signal;
};

struct pipeline {
	s32 head_index;
	s32 output_index;
	s32 primary_plane_index;
	s32 cursor_plane_index;
};

void *cb_compositor_create(char *device_name,
			   struct cb_event_loop *loop,
			   struct pipeline *pipes,
			   s32 count_pipes);

void cb_compositor_destroy(void *c);

void cb_compositor_schdule_repaint(void *c);

void cb_compositor_schdule_repaint_by_pipe(s32 pipe);

struct cb_mode *cb_compositor_add_custom_mode(void *c, s32 pipe,
					      u32 clock,
					      u16 width,
					      u16 hsync_start,
					      u16 hsync_end,
					      u16 htotal,
					      u16 hskew,
					      u16 height,
					      u16 vsync_start,
					      u16 vsync_end,
					      u16 vtotal,
					      u16 vscan,
					      u32 vrefresh,
					      bool interlaced,
					      bool pos_hsync,
					      bool pos_vsync,
					      char *mode_name);

struct cb_mode *cb_compositor_get_custom_mode(void *c, s32 pipe);

struct cb_mode *cb_compositor_enumerate_mode(void *c, s32 pipe,
					     struct cb_mode *last_mode);

s32 cb_compositor_switch_mode(void *c, s32 pipe, struct cb_mode *mode,
			      struct cb_listener *l);

s32 cb_compositor_register_ready_cb(void *c, struct cb_listener *l);

/* return the current status */
s32 cb_compositor_register_head_status_cb(void *c, s32 pipe,
					  struct cb_listener *l);
s32 cb_compositor_get_head_nr(void *c);

#endif

